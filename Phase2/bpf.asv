% channels -- # channels specified
% type -- string for type of filter
% CURRENT LIMITATION: sampling rate controls the range of plottable x values
% anything over that limit will overlap :( 
function bpf(channels, type, signal, sample_rate)
  length1 = length(signal);

  x = zeros(1, channels);
  % or do linspace
  % x = linspace(0, n, n)
  
  width = 7900/channels;
  
  figure(1)
  subplot(6,1,1);
  
  Y = fft(signal);
  disp(size(Y));
  
  P2 = abs(Y); % /43250
  P1 = P2(1:length1/2+1);
  P1(2:end-1) = 2*P1(2:end-1);
  f = sample_rate*(0:(length1/2))/length1;
  plot(f,P1) 
  %plot(signal);
  title("Raw Audio")
  
  for i=1:channels,
    fc = (i*width) - (width/2) + 100
    fl = fc - (width/2) % Lower cutoff
    fh = fc + (width/2) % High cutoff
    passband = [fl fh]
    
    % create passband filters
    if type=="bessel",
      % bessel set up
      [b,a] = besself(1, fc);
      %[h,w] = freqz(b, a);
    end
       
    if type=="butter",
      % butter set up
      [b,a] = butter(7, passband/8001);
      %[h,w] = freqz(b,a);
      pause(1)
    end
    
    if type=="cheby1",
      % cheby first order set up
      [b,a] = cheby1(1, 3, passband/8000);
      %[h,w] = freqz(b,a);
    end
    
    if type=="fir1  ",   %Check string size first, and then character equality
      b = fir1(10, passband/8000);
    end
    
    if type=="kaiser",
        win = kaiser(51, 8);

        % Calculate the coefficients using the FIR1 function.
        b  = fir1(50, passband/(sample_rate/2+1), 'bandpass', win, 'scale');
        Hk = dfilt.dffir(b);
        
    end
    
    if type~="kaiser",
        filtered = filtfilt(b,a,signal);
    else
        filtered = filter(Hk,signal);
    end
  
    Hd2 = dsp.LowpassFilter('SampleRate',sample_rate, 'FilterOrder', 10, 'PassbandFrequency', 400, 'FilterType', 'IIR', 'DesignForMinimumOrder',false);
    
   
    % Rectify
    rectified = abs(filtered).*abs(filtered);
    %[e,f] = butter(1, 6000/(sample_rate/2)); %digital butter filter 
    [e,f] = butter(1,400*2*pi,'s');
    %[e,f] = butter(6,fc/(fs/2));
    %[e,f] = butter(1, );
    %[e,f] = besself(1, 400); % analog besself 
    e
    f
    
    % attempt no. 129038719
%     num = [0, 2000]
%     den = [1, 2000]
%     Hs = tf(num,den)
%     
%     LPF = tf(e,f);
%     figure(12)
%     freqz(e,f);
%     figure(13)
%     bode(Hs);
    
    h  = fdesign.lowpass('N,F3dB', 1, 400, 16000);
    Hd1 = design(h, 'butter');
    enveloped = filter(Hd1, rectified);
    
    enveloped = sqrt(2*enveloped);  
    %[enveloped,ylower] = envelope(filtered)
    
    disp(i+1)
    figure(1)
    subplot(6,1,i+1)
    % DFT the filtered signal to freq domain
    Y = fft(filtered);
    P2 = abs(Y);
    P1 = P2(1:length1/2+1);
    P1(2:end-1) = 2*P1(2:end-1);
    f = sample_rate*(0:(length1/2))/length1;

    plot(f, P1);
    if i==1,
      figure(101)
      plot(rectified);
      disp("rectified85897484528974198");
      size(rectified)
      hold on
      plot(enveloped);
      disp("env85897484528974198");
      size(enveloped)
      hold off
    end
    figure(1)
    title(sprintf("Channel %d",i))
    ylim()
    %plot(abs(fft(filtered)))
    
    
  end
 
  disp(x)

end



